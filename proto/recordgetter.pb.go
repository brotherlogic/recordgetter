// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recordgetter.proto

package recordgetter

import (
	fmt "fmt"
	proto1 "github.com/brotherlogic/recordcollection/proto"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_af5501bf15004b71, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type DiskScore struct {
	InstanceId           int32    `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	DiskNumber           int32    `protobuf:"varint,2,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
	ScoreDate            int64    `protobuf:"varint,3,opt,name=score_date,json=scoreDate,proto3" json:"score_date,omitempty"`
	Score                int32    `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskScore) Reset()         { *m = DiskScore{} }
func (m *DiskScore) String() string { return proto.CompactTextString(m) }
func (*DiskScore) ProtoMessage()    {}
func (*DiskScore) Descriptor() ([]byte, []int) {
	return fileDescriptor_af5501bf15004b71, []int{1}
}

func (m *DiskScore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskScore.Unmarshal(m, b)
}
func (m *DiskScore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskScore.Marshal(b, m, deterministic)
}
func (m *DiskScore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskScore.Merge(m, src)
}
func (m *DiskScore) XXX_Size() int {
	return xxx_messageInfo_DiskScore.Size(m)
}
func (m *DiskScore) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskScore.DiscardUnknown(m)
}

var xxx_messageInfo_DiskScore proto.InternalMessageInfo

func (m *DiskScore) GetInstanceId() int32 {
	if m != nil {
		return m.InstanceId
	}
	return 0
}

func (m *DiskScore) GetDiskNumber() int32 {
	if m != nil {
		return m.DiskNumber
	}
	return 0
}

func (m *DiskScore) GetScoreDate() int64 {
	if m != nil {
		return m.ScoreDate
	}
	return 0
}

func (m *DiskScore) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type State struct {
	CurrentPick          *proto1.Record `protobuf:"bytes,1,opt,name=current_pick,json=currentPick,proto3" json:"current_pick,omitempty"`
	Scores               []*DiskScore   `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	ActiveFolders        []int32        `protobuf:"varint,3,rep,packed,name=active_folders,json=activeFolders,proto3" json:"active_folders,omitempty"`
	LastSeven            int64          `protobuf:"varint,4,opt,name=last_seven,json=lastSeven,proto3" json:"last_seven,omitempty"`
	SevenCount           int32          `protobuf:"varint,5,opt,name=seven_count,json=sevenCount,proto3" json:"seven_count,omitempty"`
	SevenDay             int32          `protobuf:"varint,6,opt,name=seven_day,json=sevenDay,proto3" json:"seven_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_af5501bf15004b71, []int{2}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetCurrentPick() *proto1.Record {
	if m != nil {
		return m.CurrentPick
	}
	return nil
}

func (m *State) GetScores() []*DiskScore {
	if m != nil {
		return m.Scores
	}
	return nil
}

func (m *State) GetActiveFolders() []int32 {
	if m != nil {
		return m.ActiveFolders
	}
	return nil
}

func (m *State) GetLastSeven() int64 {
	if m != nil {
		return m.LastSeven
	}
	return 0
}

func (m *State) GetSevenCount() int32 {
	if m != nil {
		return m.SevenCount
	}
	return 0
}

func (m *State) GetSevenDay() int32 {
	if m != nil {
		return m.SevenDay
	}
	return 0
}

type GetRecordRequest struct {
	Refresh              bool     `protobuf:"varint,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRecordRequest) Reset()         { *m = GetRecordRequest{} }
func (m *GetRecordRequest) String() string { return proto.CompactTextString(m) }
func (*GetRecordRequest) ProtoMessage()    {}
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_af5501bf15004b71, []int{3}
}

func (m *GetRecordRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordRequest.Unmarshal(m, b)
}
func (m *GetRecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordRequest.Marshal(b, m, deterministic)
}
func (m *GetRecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordRequest.Merge(m, src)
}
func (m *GetRecordRequest) XXX_Size() int {
	return xxx_messageInfo_GetRecordRequest.Size(m)
}
func (m *GetRecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordRequest proto.InternalMessageInfo

func (m *GetRecordRequest) GetRefresh() bool {
	if m != nil {
		return m.Refresh
	}
	return false
}

type GetRecordResponse struct {
	Record               *proto1.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	NumListens           int32          `protobuf:"varint,2,opt,name=num_listens,json=numListens,proto3" json:"num_listens,omitempty"`
	Disk                 int32          `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetRecordResponse) Reset()         { *m = GetRecordResponse{} }
func (m *GetRecordResponse) String() string { return proto.CompactTextString(m) }
func (*GetRecordResponse) ProtoMessage()    {}
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_af5501bf15004b71, []int{4}
}

func (m *GetRecordResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRecordResponse.Unmarshal(m, b)
}
func (m *GetRecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRecordResponse.Marshal(b, m, deterministic)
}
func (m *GetRecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRecordResponse.Merge(m, src)
}
func (m *GetRecordResponse) XXX_Size() int {
	return xxx_messageInfo_GetRecordResponse.Size(m)
}
func (m *GetRecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRecordResponse proto.InternalMessageInfo

func (m *GetRecordResponse) GetRecord() *proto1.Record {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *GetRecordResponse) GetNumListens() int32 {
	if m != nil {
		return m.NumListens
	}
	return 0
}

func (m *GetRecordResponse) GetDisk() int32 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "recordgetter.Empty")
	proto.RegisterType((*DiskScore)(nil), "recordgetter.DiskScore")
	proto.RegisterType((*State)(nil), "recordgetter.State")
	proto.RegisterType((*GetRecordRequest)(nil), "recordgetter.GetRecordRequest")
	proto.RegisterType((*GetRecordResponse)(nil), "recordgetter.GetRecordResponse")
}

func init() { proto.RegisterFile("recordgetter.proto", fileDescriptor_af5501bf15004b71) }

var fileDescriptor_af5501bf15004b71 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0xc7, 0x95, 0x65, 0xe9, 0xda, 0x6b, 0x41, 0x60, 0x90, 0xb0, 0x8a, 0x60, 0x55, 0x24, 0xa4,
	0x3e, 0xa0, 0x16, 0xca, 0x13, 0xe2, 0x91, 0x6e, 0x13, 0xd2, 0x84, 0x50, 0xfa, 0x01, 0xa2, 0xd4,
	0xb9, 0xb5, 0x56, 0x13, 0xbb, 0xd8, 0xce, 0xa4, 0xf2, 0xc8, 0xc7, 0xe3, 0x1b, 0xf1, 0x86, 0x7c,
	0x4e, 0xa7, 0x95, 0x6d, 0xda, 0x5b, 0xfc, 0xbb, 0xbf, 0x2f, 0xf7, 0xff, 0x5f, 0x02, 0xcc, 0xa0,
	0xd0, 0xa6, 0x5c, 0xa1, 0x73, 0x68, 0x26, 0x5b, 0xa3, 0x9d, 0x66, 0x83, 0xdb, 0x6c, 0x78, 0xb6,
	0x92, 0x6e, 0xdd, 0x2c, 0x27, 0x42, 0xd7, 0xd3, 0xa5, 0xd1, 0x6e, 0x8d, 0xa6, 0xd2, 0x2b, 0x29,
	0xa6, 0x41, 0x25, 0x74, 0x55, 0xa1, 0x70, 0x52, 0xab, 0x29, 0xdd, 0xbe, 0x83, 0x43, 0xd3, 0xf4,
	0x04, 0x92, 0xb3, 0x7a, 0xeb, 0x76, 0xe9, 0xef, 0x08, 0x7a, 0x73, 0x69, 0x37, 0x0b, 0xa1, 0x0d,
	0xb2, 0x53, 0xe8, 0x4b, 0x65, 0x5d, 0xa1, 0x04, 0xe6, 0xb2, 0xe4, 0xd1, 0x28, 0x1a, 0x27, 0x19,
	0xec, 0xd1, 0xb7, 0xd2, 0x0b, 0x4a, 0x69, 0x37, 0xb9, 0x6a, 0xea, 0x25, 0x1a, 0x7e, 0x14, 0x04,
	0x1e, 0x7d, 0x27, 0xc2, 0xde, 0x00, 0x58, 0xdf, 0x2a, 0x2f, 0x0b, 0x87, 0x3c, 0x1e, 0x45, 0xe3,
	0x38, 0xeb, 0x11, 0x99, 0x17, 0x0e, 0xd9, 0x4b, 0x48, 0xe8, 0xc0, 0x8f, 0xe9, 0x66, 0x38, 0xa4,
	0x7f, 0x23, 0x48, 0x16, 0xce, 0xd7, 0xbf, 0xc0, 0x40, 0x34, 0xc6, 0xa0, 0x72, 0xf9, 0x56, 0x8a,
	0x0d, 0x4d, 0xd0, 0x9f, 0xf1, 0xc9, 0x1d, 0x1b, 0x19, 0x81, 0xac, 0xdf, 0xaa, 0x7f, 0x48, 0xb1,
	0x61, 0x53, 0xe8, 0x50, 0x3f, 0xcb, 0x8f, 0x46, 0xf1, 0xb8, 0x3f, 0x7b, 0x35, 0x39, 0x88, 0xf3,
	0xc6, 0x66, 0xd6, 0xca, 0xd8, 0x3b, 0x78, 0x5a, 0x08, 0x27, 0xaf, 0x31, 0xbf, 0xd2, 0x55, 0x89,
	0xc6, 0xf2, 0x78, 0x14, 0x8f, 0x93, 0xec, 0x49, 0xa0, 0xe7, 0x01, 0x7a, 0x4f, 0x55, 0x61, 0x5d,
	0x6e, 0xf1, 0x1a, 0x15, 0x4d, 0x1e, 0x67, 0x3d, 0x4f, 0x16, 0x1e, 0xf8, 0x4c, 0xa8, 0x92, 0x0b,
	0xdd, 0x28, 0xc7, 0x93, 0x90, 0x09, 0xa1, 0xaf, 0x9e, 0xb0, 0xd7, 0xd0, 0x0b, 0x82, 0xb2, 0xd8,
	0xf1, 0x0e, 0x95, 0xbb, 0x04, 0xe6, 0xc5, 0x2e, 0x7d, 0x0f, 0xcf, 0x2e, 0xd0, 0xb5, 0x76, 0xf0,
	0x67, 0x83, 0xd6, 0x31, 0x0e, 0x27, 0x06, 0xaf, 0x0c, 0xda, 0x35, 0x05, 0xd0, 0xcd, 0xf6, 0xc7,
	0xf4, 0x17, 0x3c, 0xbf, 0xa5, 0xb6, 0x5b, 0xad, 0x2c, 0xb2, 0x0f, 0xd0, 0x09, 0x46, 0x1f, 0x8d,
	0xab, 0xd5, 0xf9, 0x91, 0x55, 0x53, 0xe7, 0x95, 0xb4, 0x0e, 0x95, 0xdd, 0xaf, 0x51, 0x35, 0xf5,
	0x65, 0x20, 0x8c, 0xc1, 0xb1, 0x5f, 0x2a, 0x2d, 0x30, 0xc9, 0xe8, 0x79, 0xf6, 0x27, 0x82, 0x41,
	0xe8, 0x73, 0x41, 0x81, 0xb2, 0x4b, 0xe8, 0xdd, 0x0c, 0xc3, 0xde, 0x1e, 0x86, 0xfd, 0xbf, 0xa7,
	0xe1, 0xe9, 0x83, 0xf5, 0xd6, 0xc5, 0x67, 0xe8, 0x86, 0xb7, 0x63, 0xc9, 0x1e, 0x74, 0x30, 0x7c,
	0x71, 0xd8, 0x86, 0x3e, 0x62, 0xf6, 0x11, 0x92, 0x73, 0x6d, 0x04, 0xb2, 0xfb, 0xaa, 0xf7, 0x5e,
	0x59, 0x76, 0xe8, 0x3f, 0xf8, 0xf4, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x26, 0x28, 0x11, 0x72,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RecordGetterClient is the client API for RecordGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordGetterClient interface {
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	Listened(ctx context.Context, in *proto1.Record, opts ...grpc.CallOption) (*Empty, error)
	Force(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type recordGetterClient struct {
	cc *grpc.ClientConn
}

func NewRecordGetterClient(cc *grpc.ClientConn) RecordGetterClient {
	return &recordGetterClient{cc}
}

func (c *recordGetterClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Listened(ctx context.Context, in *proto1.Record, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Listened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Force(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordGetterServer is the server API for RecordGetter service.
type RecordGetterServer interface {
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	Listened(context.Context, *proto1.Record) (*Empty, error)
	Force(context.Context, *Empty) (*Empty, error)
}

func RegisterRecordGetterServer(s *grpc.Server, srv RecordGetterServer) {
	s.RegisterService(&_RecordGetter_serviceDesc, srv)
}

func _RecordGetter_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Listened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Listened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Listened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Listened(ctx, req.(*proto1.Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Force_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Force(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Force",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Force(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordGetter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordgetter.RecordGetter",
	HandlerType: (*RecordGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _RecordGetter_GetRecord_Handler,
		},
		{
			MethodName: "Listened",
			Handler:    _RecordGetter_Listened_Handler,
		},
		{
			MethodName: "Force",
			Handler:    _RecordGetter_Force_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordgetter.proto",
}
