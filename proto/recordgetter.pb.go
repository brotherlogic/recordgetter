// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        (unknown)
// source: recordgetter.proto

package recordgetter

import (
	context "context"
	proto1 "github.com/brotherlogic/recordcollection/proto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{0}
}

type DiskScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	DiskNumber int32 `protobuf:"varint,2,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
	ScoreDate  int64 `protobuf:"varint,3,opt,name=score_date,json=scoreDate,proto3" json:"score_date,omitempty"`
	Score      int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DiskScore) Reset() {
	*x = DiskScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskScore) ProtoMessage() {}

func (x *DiskScore) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskScore.ProtoReflect.Descriptor instead.
func (*DiskScore) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{1}
}

func (x *DiskScore) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *DiskScore) GetDiskNumber() int32 {
	if x != nil {
		return x.DiskNumber
	}
	return 0
}

func (x *DiskScore) GetScoreDate() int64 {
	if x != nil {
		return x.ScoreDate
	}
	return 0
}

func (x *DiskScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPick   *proto1.Record `protobuf:"bytes,1,opt,name=current_pick,json=currentPick,proto3" json:"current_pick,omitempty"`
	Scores        []*DiskScore   `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	ActiveFolders []int32        `protobuf:"varint,3,rep,packed,name=active_folders,json=activeFolders,proto3" json:"active_folders,omitempty"`
	LastSeven     int64          `protobuf:"varint,4,opt,name=last_seven,json=lastSeven,proto3" json:"last_seven,omitempty"`
	SevenCount    int32          `protobuf:"varint,5,opt,name=seven_count,json=sevenCount,proto3" json:"seven_count,omitempty"`
	SevenDay      int32          `protobuf:"varint,6,opt,name=seven_day,json=sevenDay,proto3" json:"seven_day,omitempty"`
	// The time we pulled a want rather than an existing record
	LastWant int64 `protobuf:"varint,7,opt,name=last_want,json=lastWant,proto3" json:"last_want,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{2}
}

func (x *State) GetCurrentPick() *proto1.Record {
	if x != nil {
		return x.CurrentPick
	}
	return nil
}

func (x *State) GetScores() []*DiskScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *State) GetActiveFolders() []int32 {
	if x != nil {
		return x.ActiveFolders
	}
	return nil
}

func (x *State) GetLastSeven() int64 {
	if x != nil {
		return x.LastSeven
	}
	return 0
}

func (x *State) GetSevenCount() int32 {
	if x != nil {
		return x.SevenCount
	}
	return 0
}

func (x *State) GetSevenDay() int32 {
	if x != nil {
		return x.SevenDay
	}
	return 0
}

func (x *State) GetLastWant() int64 {
	if x != nil {
		return x.LastWant
	}
	return 0
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refresh bool `protobuf:"varint,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordRequest) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

type GetRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record     *proto1.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	NumListens int32          `protobuf:"varint,2,opt,name=num_listens,json=numListens,proto3" json:"num_listens,omitempty"`
	Disk       int32          `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *GetRecordResponse) Reset() {
	*x = GetRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordResponse) ProtoMessage() {}

func (x *GetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordResponse.ProtoReflect.Descriptor instead.
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordResponse) GetRecord() *proto1.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *GetRecordResponse) GetNumListens() int32 {
	if x != nil {
		return x.NumListens
	}
	return 0
}

func (x *GetRecordResponse) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

var File_recordgetter_proto protoreflect.FileDescriptor

var file_recordgetter_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x44, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x61, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x61, 0x6e, 0x74,
	0x22, 0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x7a,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x32, 0xca, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x13, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x13, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x13, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recordgetter_proto_rawDescOnce sync.Once
	file_recordgetter_proto_rawDescData = file_recordgetter_proto_rawDesc
)

func file_recordgetter_proto_rawDescGZIP() []byte {
	file_recordgetter_proto_rawDescOnce.Do(func() {
		file_recordgetter_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordgetter_proto_rawDescData)
	})
	return file_recordgetter_proto_rawDescData
}

var file_recordgetter_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_recordgetter_proto_goTypes = []interface{}{
	(*Empty)(nil),             // 0: recordgetter.Empty
	(*DiskScore)(nil),         // 1: recordgetter.DiskScore
	(*State)(nil),             // 2: recordgetter.State
	(*GetRecordRequest)(nil),  // 3: recordgetter.GetRecordRequest
	(*GetRecordResponse)(nil), // 4: recordgetter.GetRecordResponse
	(*proto1.Record)(nil),     // 5: recordcollection.Record
}
var file_recordgetter_proto_depIdxs = []int32{
	5, // 0: recordgetter.State.current_pick:type_name -> recordcollection.Record
	1, // 1: recordgetter.State.scores:type_name -> recordgetter.DiskScore
	5, // 2: recordgetter.GetRecordResponse.record:type_name -> recordcollection.Record
	3, // 3: recordgetter.RecordGetter.GetRecord:input_type -> recordgetter.GetRecordRequest
	5, // 4: recordgetter.RecordGetter.Listened:input_type -> recordcollection.Record
	0, // 5: recordgetter.RecordGetter.Force:input_type -> recordgetter.Empty
	4, // 6: recordgetter.RecordGetter.GetRecord:output_type -> recordgetter.GetRecordResponse
	0, // 7: recordgetter.RecordGetter.Listened:output_type -> recordgetter.Empty
	0, // 8: recordgetter.RecordGetter.Force:output_type -> recordgetter.Empty
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_recordgetter_proto_init() }
func file_recordgetter_proto_init() {
	if File_recordgetter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recordgetter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordgetter_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recordgetter_proto_goTypes,
		DependencyIndexes: file_recordgetter_proto_depIdxs,
		MessageInfos:      file_recordgetter_proto_msgTypes,
	}.Build()
	File_recordgetter_proto = out.File
	file_recordgetter_proto_rawDesc = nil
	file_recordgetter_proto_goTypes = nil
	file_recordgetter_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RecordGetterClient is the client API for RecordGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RecordGetterClient interface {
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	Listened(ctx context.Context, in *proto1.Record, opts ...grpc.CallOption) (*Empty, error)
	Force(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type recordGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordGetterClient(cc grpc.ClientConnInterface) RecordGetterClient {
	return &recordGetterClient{cc}
}

func (c *recordGetterClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Listened(ctx context.Context, in *proto1.Record, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Listened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Force(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordGetterServer is the server API for RecordGetter service.
type RecordGetterServer interface {
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	Listened(context.Context, *proto1.Record) (*Empty, error)
	Force(context.Context, *Empty) (*Empty, error)
}

// UnimplementedRecordGetterServer can be embedded to have forward compatible implementations.
type UnimplementedRecordGetterServer struct {
}

func (*UnimplementedRecordGetterServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (*UnimplementedRecordGetterServer) Listened(context.Context, *proto1.Record) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listened not implemented")
}
func (*UnimplementedRecordGetterServer) Force(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Force not implemented")
}

func RegisterRecordGetterServer(s *grpc.Server, srv RecordGetterServer) {
	s.RegisterService(&_RecordGetter_serviceDesc, srv)
}

func _RecordGetter_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Listened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto1.Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Listened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Listened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Listened(ctx, req.(*proto1.Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Force_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Force(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Force",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Force(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordGetter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordgetter.RecordGetter",
	HandlerType: (*RecordGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _RecordGetter_GetRecord_Handler,
		},
		{
			MethodName: "Listened",
			Handler:    _RecordGetter_Listened_Handler,
		},
		{
			MethodName: "Force",
			Handler:    _RecordGetter_Force_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordgetter.proto",
}
