// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: recordgetter.proto

package proto

import (
	proto "github.com/brotherlogic/recordcollection/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RequestType int32

const (
	RequestType_DEFAULT  RequestType = 0
	RequestType_AUDITION RequestType = 1
	RequestType_DIGITAL  RequestType = 2
	RequestType_CD_FOCUS RequestType = 3
)

// Enum value maps for RequestType.
var (
	RequestType_name = map[int32]string{
		0: "DEFAULT",
		1: "AUDITION",
		2: "DIGITAL",
		3: "CD_FOCUS",
	}
	RequestType_value = map[string]int32{
		"DEFAULT":  0,
		"AUDITION": 1,
		"DIGITAL":  2,
		"CD_FOCUS": 3,
	}
)

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_recordgetter_proto_enumTypes[0].Descriptor()
}

func (RequestType) Type() protoreflect.EnumType {
	return &file_recordgetter_proto_enumTypes[0]
}

func (x RequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestType.Descriptor instead.
func (RequestType) EnumDescriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{0}
}

type DiskScore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId int32 `protobuf:"varint,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	DiskNumber int32 `protobuf:"varint,2,opt,name=disk_number,json=diskNumber,proto3" json:"disk_number,omitempty"`
	ScoreDate  int64 `protobuf:"varint,3,opt,name=score_date,json=scoreDate,proto3" json:"score_date,omitempty"`
	Score      int32 `protobuf:"varint,4,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *DiskScore) Reset() {
	*x = DiskScore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskScore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskScore) ProtoMessage() {}

func (x *DiskScore) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskScore.ProtoReflect.Descriptor instead.
func (*DiskScore) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{1}
}

func (x *DiskScore) GetInstanceId() int32 {
	if x != nil {
		return x.InstanceId
	}
	return 0
}

func (x *DiskScore) GetDiskNumber() int32 {
	if x != nil {
		return x.DiskNumber
	}
	return 0
}

func (x *DiskScore) GetScoreDate() int64 {
	if x != nil {
		return x.ScoreDate
	}
	return 0
}

func (x *DiskScore) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentPick   *proto.Record `protobuf:"bytes,1,opt,name=current_pick,json=currentPick,proto3" json:"current_pick,omitempty"`
	Scores        []*DiskScore  `protobuf:"bytes,2,rep,name=scores,proto3" json:"scores,omitempty"`
	ActiveFolders []int32       `protobuf:"varint,3,rep,packed,name=active_folders,json=activeFolders,proto3" json:"active_folders,omitempty"`
	LastSeven     int64         `protobuf:"varint,4,opt,name=last_seven,json=lastSeven,proto3" json:"last_seven,omitempty"`
	SevenCount    int32         `protobuf:"varint,5,opt,name=seven_count,json=sevenCount,proto3" json:"seven_count,omitempty"`
	SevenDay      int32         `protobuf:"varint,6,opt,name=seven_day,json=sevenDay,proto3" json:"seven_day,omitempty"`
	// The time we pulled a want rather than an existing record
	LastWant           int64            `protobuf:"varint,7,opt,name=last_want,json=lastWant,proto3" json:"last_want,omitempty"`
	AuditionPick       int32            `protobuf:"varint,8,opt,name=audition_pick,json=auditionPick,proto3" json:"audition_pick,omitempty"`
	CurrentDigitalPick int32            `protobuf:"varint,9,opt,name=current_digital_pick,json=currentDigitalPick,proto3" json:"current_digital_pick,omitempty"`
	CurrentCdPick      int32            `protobuf:"varint,15,opt,name=current_cd_pick,json=currentCdPick,proto3" json:"current_cd_pick,omitempty"`
	CurrDate           int32            `protobuf:"varint,10,opt,name=curr_date,json=currDate,proto3" json:"curr_date,omitempty"`
	ValidCount         int32            `protobuf:"varint,11,opt,name=valid_count,json=validCount,proto3" json:"valid_count,omitempty"`
	UnlistenedCount    int32            `protobuf:"varint,13,opt,name=unlistened_count,json=unlistenedCount,proto3" json:"unlistened_count,omitempty"`
	CatCount           map[int32]int32  `protobuf:"bytes,12,rep,name=cat_count,json=catCount,proto3" json:"cat_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ScoreCount         map[int32]int32  `protobuf:"bytes,14,rep,name=score_count,json=scoreCount,proto3" json:"score_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CattypeCount       map[string]int32 `protobuf:"bytes,16,rep,name=cattype_count,json=cattypeCount,proto3" json:"cattype_count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Issue              int32            `protobuf:"varint,17,opt,name=issue,proto3" json:"issue,omitempty"`
	Work               int32            `protobuf:"varint,18,opt,name=work,proto3" json:"work,omitempty"`
	Sales              int32            `protobuf:"varint,19,opt,name=sales,proto3" json:"sales,omitempty"`
	TwelvePhs          int32            `protobuf:"varint,20,opt,name=twelve_phs,json=twelvePhs,proto3" json:"twelve_phs,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{2}
}

func (x *State) GetCurrentPick() *proto.Record {
	if x != nil {
		return x.CurrentPick
	}
	return nil
}

func (x *State) GetScores() []*DiskScore {
	if x != nil {
		return x.Scores
	}
	return nil
}

func (x *State) GetActiveFolders() []int32 {
	if x != nil {
		return x.ActiveFolders
	}
	return nil
}

func (x *State) GetLastSeven() int64 {
	if x != nil {
		return x.LastSeven
	}
	return 0
}

func (x *State) GetSevenCount() int32 {
	if x != nil {
		return x.SevenCount
	}
	return 0
}

func (x *State) GetSevenDay() int32 {
	if x != nil {
		return x.SevenDay
	}
	return 0
}

func (x *State) GetLastWant() int64 {
	if x != nil {
		return x.LastWant
	}
	return 0
}

func (x *State) GetAuditionPick() int32 {
	if x != nil {
		return x.AuditionPick
	}
	return 0
}

func (x *State) GetCurrentDigitalPick() int32 {
	if x != nil {
		return x.CurrentDigitalPick
	}
	return 0
}

func (x *State) GetCurrentCdPick() int32 {
	if x != nil {
		return x.CurrentCdPick
	}
	return 0
}

func (x *State) GetCurrDate() int32 {
	if x != nil {
		return x.CurrDate
	}
	return 0
}

func (x *State) GetValidCount() int32 {
	if x != nil {
		return x.ValidCount
	}
	return 0
}

func (x *State) GetUnlistenedCount() int32 {
	if x != nil {
		return x.UnlistenedCount
	}
	return 0
}

func (x *State) GetCatCount() map[int32]int32 {
	if x != nil {
		return x.CatCount
	}
	return nil
}

func (x *State) GetScoreCount() map[int32]int32 {
	if x != nil {
		return x.ScoreCount
	}
	return nil
}

func (x *State) GetCattypeCount() map[string]int32 {
	if x != nil {
		return x.CattypeCount
	}
	return nil
}

func (x *State) GetIssue() int32 {
	if x != nil {
		return x.Issue
	}
	return 0
}

func (x *State) GetWork() int32 {
	if x != nil {
		return x.Work
	}
	return 0
}

func (x *State) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *State) GetTwelvePhs() int32 {
	if x != nil {
		return x.TwelvePhs
	}
	return 0
}

type GetRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refresh bool                           `protobuf:"varint,1,opt,name=refresh,proto3" json:"refresh,omitempty"`
	Type    RequestType                    `protobuf:"varint,2,opt,name=type,proto3,enum=recordgetter.RequestType" json:"type,omitempty"`
	Filling proto.ReleaseMetadata_FileSize `protobuf:"varint,3,opt,name=filling,proto3,enum=recordcollection.ReleaseMetadata_FileSize" json:"filling,omitempty"`
}

func (x *GetRecordRequest) Reset() {
	*x = GetRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordRequest) ProtoMessage() {}

func (x *GetRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordRequest.ProtoReflect.Descriptor instead.
func (*GetRecordRequest) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{3}
}

func (x *GetRecordRequest) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

func (x *GetRecordRequest) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_DEFAULT
}

func (x *GetRecordRequest) GetFilling() proto.ReleaseMetadata_FileSize {
	if x != nil {
		return x.Filling
	}
	return proto.ReleaseMetadata_FileSize(0)
}

type GetRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Record     *proto.Record `protobuf:"bytes,1,opt,name=record,proto3" json:"record,omitempty"`
	NumListens int32         `protobuf:"varint,2,opt,name=num_listens,json=numListens,proto3" json:"num_listens,omitempty"`
	Disk       int32         `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *GetRecordResponse) Reset() {
	*x = GetRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordResponse) ProtoMessage() {}

func (x *GetRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordResponse.ProtoReflect.Descriptor instead.
func (*GetRecordResponse) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{4}
}

func (x *GetRecordResponse) GetRecord() *proto.Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *GetRecordResponse) GetNumListens() int32 {
	if x != nil {
		return x.NumListens
	}
	return 0
}

func (x *GetRecordResponse) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

type ForceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type RequestType `protobuf:"varint,1,opt,name=type,proto3,enum=recordgetter.RequestType" json:"type,omitempty"`
}

func (x *ForceRequest) Reset() {
	*x = ForceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_recordgetter_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRequest) ProtoMessage() {}

func (x *ForceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_recordgetter_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRequest.ProtoReflect.Descriptor instead.
func (*ForceRequest) Descriptor() ([]byte, []int) {
	return file_recordgetter_proto_rawDescGZIP(), []int{5}
}

func (x *ForceRequest) GetType() RequestType {
	if x != nil {
		return x.Type
	}
	return RequestType_DEFAULT
}

var File_recordgetter_proto protoreflect.FileDescriptor

var file_recordgetter_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62,
	0x72, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xec, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73,
	0x65, 0x76, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x76, 0x65,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x76, 0x65, 0x6e, 0x5f,
	0x64, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x6e,
	0x44, 0x61, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x77, 0x61, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x57, 0x61, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x61, 0x6c, 0x50, 0x69, 0x63, 0x6b, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x63, 0x64, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x64, 0x50, 0x69, 0x63, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x6e, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x43, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0a, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x0d, 0x63, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x63, 0x61,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x77,
	0x65, 0x6c, 0x76, 0x65, 0x5f, 0x70, 0x68, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x74, 0x77, 0x65, 0x6c, 0x76, 0x65, 0x50, 0x68, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x43, 0x61, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74,
	0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x7a, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x3d, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x43, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x55, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x49, 0x47, 0x49, 0x54, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x44, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x10, 0x03, 0x32, 0xd1, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x09, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a,
	0x13, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x2e,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x2c,
	0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_recordgetter_proto_rawDescOnce sync.Once
	file_recordgetter_proto_rawDescData = file_recordgetter_proto_rawDesc
)

func file_recordgetter_proto_rawDescGZIP() []byte {
	file_recordgetter_proto_rawDescOnce.Do(func() {
		file_recordgetter_proto_rawDescData = protoimpl.X.CompressGZIP(file_recordgetter_proto_rawDescData)
	})
	return file_recordgetter_proto_rawDescData
}

var file_recordgetter_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_recordgetter_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_recordgetter_proto_goTypes = []interface{}{
	(RequestType)(0),                    // 0: recordgetter.RequestType
	(*Empty)(nil),                       // 1: recordgetter.Empty
	(*DiskScore)(nil),                   // 2: recordgetter.DiskScore
	(*State)(nil),                       // 3: recordgetter.State
	(*GetRecordRequest)(nil),            // 4: recordgetter.GetRecordRequest
	(*GetRecordResponse)(nil),           // 5: recordgetter.GetRecordResponse
	(*ForceRequest)(nil),                // 6: recordgetter.ForceRequest
	nil,                                 // 7: recordgetter.State.CatCountEntry
	nil,                                 // 8: recordgetter.State.ScoreCountEntry
	nil,                                 // 9: recordgetter.State.CattypeCountEntry
	(*proto.Record)(nil),                // 10: recordcollection.Record
	(proto.ReleaseMetadata_FileSize)(0), // 11: recordcollection.ReleaseMetadata.FileSize
}
var file_recordgetter_proto_depIdxs = []int32{
	10, // 0: recordgetter.State.current_pick:type_name -> recordcollection.Record
	2,  // 1: recordgetter.State.scores:type_name -> recordgetter.DiskScore
	7,  // 2: recordgetter.State.cat_count:type_name -> recordgetter.State.CatCountEntry
	8,  // 3: recordgetter.State.score_count:type_name -> recordgetter.State.ScoreCountEntry
	9,  // 4: recordgetter.State.cattype_count:type_name -> recordgetter.State.CattypeCountEntry
	0,  // 5: recordgetter.GetRecordRequest.type:type_name -> recordgetter.RequestType
	11, // 6: recordgetter.GetRecordRequest.filling:type_name -> recordcollection.ReleaseMetadata.FileSize
	10, // 7: recordgetter.GetRecordResponse.record:type_name -> recordcollection.Record
	0,  // 8: recordgetter.ForceRequest.type:type_name -> recordgetter.RequestType
	4,  // 9: recordgetter.RecordGetter.GetRecord:input_type -> recordgetter.GetRecordRequest
	10, // 10: recordgetter.RecordGetter.Listened:input_type -> recordcollection.Record
	6,  // 11: recordgetter.RecordGetter.Force:input_type -> recordgetter.ForceRequest
	5,  // 12: recordgetter.RecordGetter.GetRecord:output_type -> recordgetter.GetRecordResponse
	1,  // 13: recordgetter.RecordGetter.Listened:output_type -> recordgetter.Empty
	1,  // 14: recordgetter.RecordGetter.Force:output_type -> recordgetter.Empty
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_recordgetter_proto_init() }
func file_recordgetter_proto_init() {
	if File_recordgetter_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_recordgetter_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskScore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_recordgetter_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_recordgetter_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_recordgetter_proto_goTypes,
		DependencyIndexes: file_recordgetter_proto_depIdxs,
		EnumInfos:         file_recordgetter_proto_enumTypes,
		MessageInfos:      file_recordgetter_proto_msgTypes,
	}.Build()
	File_recordgetter_proto = out.File
	file_recordgetter_proto_rawDesc = nil
	file_recordgetter_proto_goTypes = nil
	file_recordgetter_proto_depIdxs = nil
}
