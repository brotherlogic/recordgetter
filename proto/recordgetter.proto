syntax = "proto3";

package recordgetter;

import "github.com/brotherlogic/recordcollection/proto/recordcollection.proto";

option go_package = "github.com/brotherlogic/recordgetter/proto";

message Empty {}

message DiskScore {
  int32 instance_id = 1;
  int32 disk_number = 2;
  int64 score_date = 3;
  int32 score = 4;
}

message State {
  recordcollection.Record current_pick = 1;
  repeated DiskScore scores = 2;
  repeated int32 active_folders = 3;
  int64 last_seven = 4;
  int32 seven_count = 5;
  int32 seven_day = 6;

  // The time we pulled a want rather than an existing record
  int64 last_want = 7;

  int32 audition_pick = 8;
  int32 current_digital_pick = 9;

  int32 curr_date = 10;
  int32 valid_count = 11;

  map<int32, int32> cat_count = 12;
}

enum RequestType {
    DEFAULT = 0;
    AUDITION = 1;
    DIGITAL = 2;
  }

message GetRecordRequest {
  bool refresh = 1;
  RequestType type = 2;
}

message GetRecordResponse {
  recordcollection.Record record = 1;
  int32 num_listens = 2;
  int32 disk = 3;
}

message ForceRequest{
  RequestType type = 1;
}

service RecordGetter {
  rpc GetRecord(GetRecordRequest) returns (GetRecordResponse);
  rpc Listened(recordcollection.Record) returns (Empty);
  rpc Force(ForceRequest) returns (Empty);
}
