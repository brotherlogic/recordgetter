// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: recordgetter.proto

package proto

import (
	context "context"
	proto "github.com/brotherlogic/recordcollection/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecordGetterClient is the client API for RecordGetter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordGetterClient interface {
	GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error)
	Listened(ctx context.Context, in *proto.Record, opts ...grpc.CallOption) (*Empty, error)
	Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*Empty, error)
}

type recordGetterClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordGetterClient(cc grpc.ClientConnInterface) RecordGetterClient {
	return &recordGetterClient{cc}
}

func (c *recordGetterClient) GetRecord(ctx context.Context, in *GetRecordRequest, opts ...grpc.CallOption) (*GetRecordResponse, error) {
	out := new(GetRecordResponse)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Listened(ctx context.Context, in *proto.Record, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Listened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordGetterClient) Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/recordgetter.RecordGetter/Force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordGetterServer is the server API for RecordGetter service.
// All implementations should embed UnimplementedRecordGetterServer
// for forward compatibility
type RecordGetterServer interface {
	GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error)
	Listened(context.Context, *proto.Record) (*Empty, error)
	Force(context.Context, *ForceRequest) (*Empty, error)
}

// UnimplementedRecordGetterServer should be embedded to have forward compatible implementations.
type UnimplementedRecordGetterServer struct {
}

func (UnimplementedRecordGetterServer) GetRecord(context.Context, *GetRecordRequest) (*GetRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedRecordGetterServer) Listened(context.Context, *proto.Record) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listened not implemented")
}
func (UnimplementedRecordGetterServer) Force(context.Context, *ForceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Force not implemented")
}

// UnsafeRecordGetterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordGetterServer will
// result in compilation errors.
type UnsafeRecordGetterServer interface {
	mustEmbedUnimplementedRecordGetterServer()
}

func RegisterRecordGetterServer(s grpc.ServiceRegistrar, srv RecordGetterServer) {
	s.RegisterService(&RecordGetter_ServiceDesc, srv)
}

func _RecordGetter_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).GetRecord(ctx, req.(*GetRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Listened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Listened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Listened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Listened(ctx, req.(*proto.Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordGetter_Force_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordGetterServer).Force(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordgetter.RecordGetter/Force",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordGetterServer).Force(ctx, req.(*ForceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecordGetter_ServiceDesc is the grpc.ServiceDesc for RecordGetter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecordGetter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "recordgetter.RecordGetter",
	HandlerType: (*RecordGetterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecord",
			Handler:    _RecordGetter_GetRecord_Handler,
		},
		{
			MethodName: "Listened",
			Handler:    _RecordGetter_Listened_Handler,
		},
		{
			MethodName: "Force",
			Handler:    _RecordGetter_Force_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordgetter.proto",
}
